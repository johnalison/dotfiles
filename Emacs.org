#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/dotfiles/init.el


* Package System Setup

#+begin_src emacs-lisp


  ;; MELPA
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))


  (package-initialize)
  ;;(unless package-archive-contents
  ;;  (package-refresh-contents))

  ;;(require 'use-package)
  ;;'(setq use-package-always-ensure t)


#+end_src


* Basic UI Configuration

Simplify the UI

#+begin_src emacs-lisp

  ;; Simplify the UI
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar


  ;; Set up the visible bell
  (setq ring-bell-function 'ignore)
  (setq sentence-end-double-space nil)

#+end_src

Fonts

#+begin_src emacs-lisp

  ;; Set the fixed pitch face
  (set-face-attribute 'default nil :height 150) ;; 15pt font

  ;; Set the variable pitch face
  ;;(set-face-attribute 'variable-pitch nil :font "Inter" :height 175 :weight 'regular)
  ;(set-face-attribute 'variable-pitch nil :font "Lucida Grande" :height 175 :weight 'regular)
  (set-face-attribute 'variable-pitch nil :height 175 :weight 'regular)

#+end_src

No Backup files

#+begin_src emacs-lisp
  (setq make-backup-files nil) ;turn off the backup files
#+end_src

Copy and paste

#+begin_src emacs-lisp

  (setq save-interprogram-paste-before-kill t)
  ;;(setq select-enable-clipboard t)
  (setq select-enable-clipboard nil)

  ;; Make cut and paste work with the macOS clipboard
  (defun yank-from-osx-clipboard ()
    "Insert the contents of the macOS clipboard at point."
    (interactive)
    (insert (shell-command-to-string "pbpaste")))

  (global-set-key (kbd "s-v") 'yank-from-osx-clipboard)

#+end_src

Copy the current region to the clipboard.  Bound to =C-c e=

#+begin_src emacs-lisp

  (defun copy-region-to-pbcopy ()
    "Copy the current region to the clipboard using pbcopy."
    (interactive)
    (if (use-region-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "pbcopy")
          (deactivate-mark) ; Optionally deactivate the mark
          (message "Region copied to clipboard using pbcopy!"))
      (message "No active region!")))


  (global-set-key "\C-ce" 'copy-region-to-pbcopy)

#+end_src


* UI Configuration

** Scolling

#+begin_src emacs-lisp

  (defalias 'scroll-ahead `scroll-up)
  (defalias 'scroll-behind `scroll-down)

  (defun scroll-n-lines-ahead (&optional n)
    "Scroll ahead N lines (1 by default)."
    (interactive "P")
    (scroll-ahead (prefix-numeric-value n)))

  (defun scroll-n-lines-behind (&optional n)
    "Scroll behind N lines (1 by default)."
    (interactive "P")
    (scroll-behind (prefix-numeric-value n)))


  (global-set-key "\C-q" 'scroll-n-lines-behind)
  (global-set-key "\C-x\C-q" 'quoted-insert)
  (global-set-key "\C-z" 'scroll-n-lines-ahead)


  (defun point-to-top ()
    "Put point on the top line of window"
    (interactive)
    (move-to-window-line 0))

  (defun point-to-bottom ()
    "Put point on the top line of window"
    (interactive)
    (move-to-window-line -1))

  (defun line-to-top ()
    "Move the current line to top of window."
    (interactive)
    (recenter 0))


  (global-set-key "\M-," 'point-to-top)
  (global-set-key "\M-." 'point-to-bottom)
  (global-set-key "\M-!" 'line-to-top)

#+end_src

Save hist

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+end_src


* Key bindings

#+begin_src emacs-lisp

  (global-set-key "\C-h" 'delete-backward-char)
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key "\M-h" 'backward-kill-word)
  ;;(global-set-key "\M-w" 'ispell-word)
  (global-set-key "\M-#" 'ispell-region)

  ;;(global-set-key "\C-l" 'goto-line)
  (global-set-key "\M-n" 'forward-paragraph)
  (global-set-key "\M-p" 'backward-paragraph)

  (global-set-key (kbd "C-c r") 'revert-buffer-quick)
  (global-set-key "\M-?" 'help-command)
  (global-set-key (kbd "<backtab>") 'dabbrev-expand)

#+end_src


* Which key

[[https://github.com/justbur/emacs-which-key][which-key]]  is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer. The =which-key-idle-delay= sets how long until the pannel shows

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src


* Counsel

Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-X" . counsel-M-x)
           ("C-x B" . counsel-ibuffer)
  	 ;;("C-x F" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src


* Helpful

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful information to Emacs’ describe- command buffers. For example, if you use describe-function, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))


#+end_src


* Buffers

** Check Buffer before switching

#+begin_src emacs-lisp

  					; Check buffer exists before switching there
  (defadvice switch-to-buffer (before existing-buffer
  				    activate compile)
    "When interactive, swtich to existing buffers only,
     unless given a prefex argument."
    (interactive
     (list (read-buffer "Switch to buffer: "
  		      (other-buffer)
  		      (null current-prefix-arg)))))


#+end_src

** Buffer placement

#+begin_src emacs-lisp


  (setq display-buffer-alist
        '(

  	;; Anatomy of a an entry:
  	;; (BUFFER-MATCHER
  	;;  LIST-OF-DISPLAY-ACTIONS
  	;;  &optional PARAMETERS)

  	("\\*Org todo\\*"
  	 ;; list of display functions
  	 (display-buffer-reuse-window
  	  display-buffer-below-selected)
  	 ;; Parameters
  	 (window-height . fit-window-to-buffer)
  	 (dedicated . t)
  	 )

  	("\\*wclock\\*"
  	 ;; list of display functions
  	 (display-buffer-reuse-window
  	  display-buffer-below-selected)
  	 ;; Parameters
  	 (window-height . fit-window-to-buffer)
  	 (dedicated . t)
  	 )

  	
  	))

#+end_src


Ediff

#+begin_src emacs-lisp

  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

#+end_src


* Text Editing 

Whitespace

#+begin_src emacs-lisp


  (defun replace-blank-lines-with-true-blanks ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]+$" nil t)
        (replace-match "" nil nil))))

  (defun remove-trailing-whitespace ()
    (interactive)
    (when (derived-mode-p 'python-mode 'emacs-lisp-mode)
      (delete-trailing-whitespace)))

  (add-hook 'before-save-hook 'remove-trailing-whitespace)


#+end_src


* Copilot

https://github.com/copilot-emacs/copilot.el

#+begin_src emacs-lisp

  ;; Setting up copilot
  (add-to-list 'load-path "~/emacs/copilot.el")
  (require 'editorconfig)
  (require 'copilot)
  (add-hook 'prog-mode-hook 'copilot-mode)
  (define-key copilot-completion-map (kbd "<backtab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "C-c C-f") 'copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd "C-M-<tab>") 'copilot-accept-completion-by-line)  

  (define-key copilot-completion-map (kbd "M-p") 'copilot-previous-completion)
  (define-key copilot-completion-map (kbd "M-n") 'copilot-next-completion)
  (define-key copilot-completion-map (kbd "C-g") 'copilot-clear-overlay)

  (setq warning-suppress-types '((copilot)))

#+end_src


Chat: https://github.com/chep/copilot-chat.el
 
Automatically make git commit messages.

#+begin_src emacs-lisp

  (add-hook 'git-commit-setup-hook 'copilot-chat-insert-commit-message)
  (global-set-key (kbd "C-c c") 'copilot-chat-transient)

#+end_src


* GPTel


#+begin_src emacs-lisp


  ;; Setting up gptel
  ;; (add-to-list 'load-path "~/emacs/gptel")

  (use-package gptel
    :ensure t
    :config
    ;; either hard‑code it (not recommended for shared configs):
    ;;(setq gptel-api-key "sk‑YOUR_SECRET_KEY_HERE")

    ;; or, read from your shell’s env var:
    (setq gptel-api-key (getenv "OPENAI_API_KEY")))
  

  (add-to-list 'gptel-directives '(dict . "Provide synonyms for the word I provide. Respond with a list of words separated by commas; respond in one line."))
  (add-to-list 'gptel-directives '(math . "I want you to act like a mathematician. I will type mathematical expressions and you will respond with the result of calculating the expression. I want you to answer only with the final amount and nothing else. Do not write explanations. When I need to tell you something in English, I'll do it by putting the text inside square brackets {like this}."))

  (global-set-key (kbd "C-c g") 'gptel-send)
  (global-set-key (kbd "C-c m") 'gptel-menu)


  (defun gptel-send-with-options (&optional arg)
    "Send query.  With prefix ARG open gptel's menu instead."
    (interactive "P")
    (if arg
        (call-interactively 'gptel-menu)
      (gptel--suffix-send (transient-args 'gptel-menu))))


  ;; Optional defaults
  (setq gptel-use-tools t                 ; allow tool use by default
        gptel-confirm-tool-calls nil        ; ask before each invocation
        gptel-include-tool-results nil)     ; echo results back to the model


  (gptel-make-preset 'proofreading
    :description "Preset for proofreading tasks"
    :system "Please copy edit this text. The replace will applied in place so only return the edited text."
    :use-context 'system)



#+end_src

Look up function... Should probalbly being gptel-quick instead !

#+begin_src emacs-lisp

  (defvar gptel-lookup--history nil)

  (defun gptel-lookup (prompt)
    (interactive (list (read-string "Ask ChatGPT: " nil gptel-lookup--history)))
    (when (string= prompt "") (user-error "A prompt is required."))
    (gptel-request
        prompt
      :system "You LLM living in Emacs and a helpful assistant. Be concise"      ;; <- Your system directive here
      :callback
      (lambda (response info)
        (if (not response)
            (message "gptel-lookup failed with message: %s" (plist-get info :status))
  	(with-current-buffer (get-buffer-create "*gptel-lookup*")
            (let ((inhibit-read-only t))
              (erase-buffer)
              (insert response))
            (special-mode)
            (display-buffer (current-buffer)
                            `((display-buffer-in-side-window)
                              (side . bottom)
                              (window-height . ,#'fit-window-to-buffer))))))))


#+end_src


* Vertigo

The [[https://github.com/minad/vertico][Vertigo]] package applies a vertical layout to the minibuffer. It also pops up the minibuffer eagerly so we can see the available options without further interactions. This package is very fast and "just works", though it also is highly customisable in case we need to modify its behaviour.


#+begin_src emacs-lisp

  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))


  (keymap-set vertico-map "?" #'minibuffer-completion-help)
  (keymap-set vertico-map "M-RET" #'minibuffer-force-complete-and-exit)
  (keymap-set vertico-map "M-TAB" #'minibuffer-complete)
  (keymap-set vertico-map "TAB" #'minibuffer-complete)


#+end_src


* Marginalia

The [[https://protesilaos.com/emacs/dotemacs#h:bd3f7a1d-a53d-4d3e-860e-25c5b35d8e7e][Marginalia]] package provides helpful annotations next to  completion candidates in the minibuffer.  The information on display depends on the type of content.  If it is about files, it shows file permissions and the last modified date.  If it is a buffer, it shows the buffer's size, major mode, and the like.
 
#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src


* Orderless

The [[https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2][orderless]] package lets the minibuffer use an out-of-order pattern matching algorithm.  It matches space-separated words or regular expressions in any order.  In its simplest form, something like "ins pac" matches `package-menu-mark-install' as well as `package-install'.  This is a powerful tool because we no longer need to remember exactly how something is named.

Note that Emacs has lots of "completion styles" (pattern matching algorithms), but let us keep things simple.

#+begin_src emacs-lisp

  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic)))
    
#+end_src


* Consult


The [[https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d][consult]] package provides lots of commands that are enhanced variants of basic, built-in functionality.  One of the headline features of consult is its preview facility, where it shows in another Emacs window the context of what is currently matched in the minibuffer.  Here I define key bindings for some commands you may find useful.  The mnemonic for their prefix is "alternative search" (as opposed to the basic C-s or C-r keys).

#+begin_src emacs-lisp

  (use-package consult
    :ensure t
    :bind (;; A recursive grep
           ("M-s g" . consult-grep)
           ;; Search for files names recursively
           ("M-s f" . consult-find)
           ;; Search through the outline (headings) of the file
           ("M-s M-o" . consult-outline)
           ;; Search the current buffer
           ("M-s M-l" . consult-line)
           ;; Switch to another buffer, or bookmarked file, or recently
           ;; opened file.
           ("M-s b" . consult-buffer)))
    
#+end_src


* Embark

[[https://github.com/oantolin/embark][embark]]
#+begin_src emacs-lisp

    (use-package embark
      :ensure t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ;("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
       ) 

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      ;; Show the Embark target at point via Eldoc. You may adjust the
      ;; Eldoc strategy, if you want to see the documentation from
      ;; multiple providers. Beware that using this can be a little
      ;; jarring since the message shown in the minibuffer can be more
      ;; than one line, causing the modeline to move up and down:

      ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
      ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))


    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t ; only need to install it, embark loads it after consult if found
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))


#+end_src


* Magit

 The `magit' package is a powerful interface to Git.

#+begin_src emacs-lisp

  (use-package magit
    :ensure t)

#+end_src


* Dired

The `dired' package is the built-in file manager of Emacs.

#+begin_src emacs-lisp


  (use-package dired
    :ensure nil              ;; dired is built-in
    :bind (:map dired-mode-map
                ("b" . dired-up-directory))
    :custom ((insert-directory-program "gls")
  	   (dired-listing-switches "-agho --group-directories-first")
  	   ;;(dired-dwim-target t)
  	   ;;(dired-recursive-copies 'always)
  	   ;;(dired-recursive-deletes 'top)
  	   )
    )


  (with-eval-after-load 'dired
    (require 'dired-x))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    (add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; -- OR! --
    (setq dired-open-extensions '(("key" . "open")
  				("docx". "open")
  				("xlsx". "open")
  				("pdf" . "open"))))


  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind(:map dired-mode-map
  	("H" . dired-hide-dotfiles-mode)
    ))
    
#+end_src


* Rainbow Delimiters
 
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src


* Tramps

LPC

#+begin_src emacs-lisp

  (setq remote-lpc-coffea4bees-path "/ssh:jda102@cmslpc-el9.fnal.gov:/uscms/home/jda102/nobackup/HH4b/Run3/coffea4bees/")

  ;; Example of using the variable
  (defun open-lpc-coffea4bees ()
    "Open the remote HH4b directory on the LPC."
    (interactive)
    (find-file remote-lpc-coffea4bees-path))
    
#+end_src

Falcon

#+begin_src emacs-lisp

  (setq remote-falcon-coffea4bees-path "/ssh:jalison@falcon.phys.cmu.edu:/home/export/jalison/work/coffea4bees/python")

  ;; Example of using the variable
  (defun open-falcon-coffea4bees ()
    "Open the remote HH4b directory on falcon.phys.cmu.edu"
    (interactive)
    (find-file remote-falcon-coffea4bees-path))


#+end_src

  
* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Fonts


The efs/org-font-setup function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in org-mode. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    ;(font-lock-add-keywords 'org-mode
    ;			  '(("^ *\\([-]\\) "
    ;			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


    ;; Set faces for heading levels with colors
    ;;(set-face-attribute 'org-level-1 nil :font "Lucida Grande" :weight 'bold    :height 1.1 :foreground "#8350ef")
    ;;;;;(set-face-attribute 'org-level-1 nil :font "Lucida Grande" :weight 'bold    :height 1.1 :foreground "mediumblue")
    ;;;;;(set-face-attribute 'org-level-2 nil :font "Lucida Grande" :weight 'bold    :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-3 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-4 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-5 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-6 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-7 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 
    ;;;;;(set-face-attribute 'org-level-8 nil :font "Lucida Grande" :weight 'regular :height 1.1 ) 

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit '(shadow fixed-pitch) :height 1.0)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch) :height 0.9)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    )

#+end_src


** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    ;;(setq-default line-spacing 0.5) ;; 0.2 means 20% extra space
    (visual-line-mode 1))


  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-files
    	'("~/RoamNotes/Tasks.org"
    	  "~/RoamNotes/Mail.org"
    	  "~/RoamNotes/Archive.org"
    	  "~/RoamNotes/Birthdays.org"
    	  "~/RoamNotes/gcal.org"
    	  ))
    (setq org-hide-emphasis-markers t)
    (setq org-hide-block-startup t)
    (efs/org-font-setup)

    (setq org-insert-heading-respect-content t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)


    (setq org-todo-keywords
    	'((sequence "TODO(t)" "The ONE thing(o)" "Now(n)" "Someday Maybe(s)" "Waiting(w)" "Planned(p)" "|" "CANCEL(c!)" "DONE(d!)")
    	  ))

    (setq org-refile-targets
    	'(("Archive.org" :maxlevel . 1)
    	  ("Tasks.org" :maxlevel . 1)
    	  ))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;;
    (setq org-tag-alist
    	'((:startgroup)
    	  ;; Put mutually exclusive tags here
    	  (:endgroup)
    	  ;;("@errand" . ?E)
    	  ;;("@home" . ?H)
    	  ;;("@work" . ?W)
    	  ;;("meeting" . ?m)
    	  ;;("planning" . ?p)
    	  ("teaching" . ?t)
    	  ("emacs" . ?e)
    	  ("HGC" . ?H)
    	  ("4b" . ?4)
    	  ("bbWW" . ?W)
    	  ;;("publish" . ?P)
    	  ("idea" . ?i)
    	  ("question" . ?q)
    	  ))


    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
    	'(("d" "Dashboard"
    	   ((agenda "" ((org-deadline-warning-days 7)))
    	    (todo "The ONE thing"
    		  ((org-agenda-overriding-header "The ONE Thing")))
    	    (todo "Now"
    		  ((org-agenda-overriding-header "To do:")))
    	    (todo "Waiting"
    		  ((org-agenda-overriding-header "Waiting on")))
    	    (todo "TODO"
    		  ((org-agenda-overriding-header "On a Burner in the back of my mind")))  	    
    	    ;;(tags-todo "agenda/Waiting" ((org-agenda-overriding-header "Waiting on")))
    	    ))

    	  ("t" "To do"
    	   ((todo "TODO"
    		  ((org-agenda-overriding-header "Open Items")))))

    	  ("n" "To do now"
    	   ((todo "Now"
    		  ((org-agenda-overriding-header "Now:")))))


    	  ("o" "The ONE Thing"
    	   ((todo "The ONE thing"
    		  ((org-agenda-overriding-header "The ONE Thing")))))

    	  ("s" "Someday Maybe"
    	   ((todo "Someday Maybe"
    		  ((org-agenda-overriding-header "Someday Maybe")))))

    	  ;; The + [tag-name] means that the tag is required the - [tag-name] means that the tag is excluded
    	  ;;("W" "Work Tasks" tags-todo "+work-email")

    	  ))

    (setq org-capture-templates
    	`(("a" "Appointment" entry (file "~/RoamNotes/gcal.org" )
    	   "* %?")
    	  ("t" "Tasks / Projects")

    	  ;; %? is for the cursor /  %U is the time stamp  / %a is the link to the file / %i is the current region
    	  ;;("tt" "Task" entry (file+olp "~/RoamNotes/Tasks.org" "Inbox")
    	  ;; "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
    	  ("tt" "Task" entry (file "~/RoamNotes/Tasks.org")
             "* TODO %?\n  %U\n " :empty-lines 1)

    	  ("m", "Email Workflow")
    	  ("mf", "Follow Up" entry (file+olp "~/RoamNotes/Mail.org" "Follow Up")
    	   "* TODO %a\n\n %i"
    	   :immediate-finish t)

    	  ("mr", "Read Later" entry (file+olp "~/RoamNotes/Mail.org" "Read Later")
    	   "* TODO %a\n\n %i"
    	   :immediate-finish t))
    	)
    )

  (add-hook 'org-mode-hook 'abbrev-mode)


#+end_src



* Org mode Keybindings

 This unbinds the Alt-Left and Alt-Right keys in Org-mode, which will make them fall back to the global Emacs keybindings (moving by word).

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el
  					;
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "<M-left>") nil)
    (define-key org-mode-map (kbd "<backtab>") nil)
    (define-key org-mode-map (kbd "<M-right>") nil))


  #+end_src


* Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in org-mode buffers with nicer looking characters that you can control. 

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("○" "-" "" "" "" "" "")))

    ;; Other options: "◉" "○" "●" "○" "●" "○" "●"
  
#+end_src


* Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. 

#+begin_src emacs-lisp : tangle ~/dotfiles/init-org.el

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src


* Latex in Org mode

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (setq org-latex-create-formula-image-program 'dvipng) ;; or 'dvisvgm for SVG output
  (setq org-export-with-broken-links t)  ;; Allow all broken links
  (setq org-startup-with-latex-preview t)
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(300))
  
#+end_src

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  ;; adjust image size, scale, background, etc.
  (setq org-format-latex-options
        ;; (see C-h v org-format-latex-options for all settings)
        '(:foreground default :background default
          :scale 2.0   ; 1.0 = 100% size
          :html-foreground "Black" :html-background "Transparent"
          :html-scale 1.0))

#+end_src


* Org Calendar

Set the calendar to open in a side window at the top of the screen

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el
  
  (add-to-list 'display-buffer-alist
               '("\\*Calendar\\*"
                 (display-buffer-in-side-window)
                 (side . top)
                 (window-height . 20)))

#+end_src

Default show onnly one day

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (setq org-agenda-span 'day)
  
#+end_src



* Org Roam

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (define-prefix-command 'org-roam-prefix-map)
  (global-set-key (kbd "C-c n") 'org-roam-prefix-map)


  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-dailies-directory   "Journal/")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        (file "~/RoamNotes/Templates/DailyTemplate.org")
        :target (file+head "%<%Y/%m-%B/%d-%B-%Y-%A>.org" "#+title: %<%d %B %Y %A>\n")))
     )
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n\n %?\n" :empty-lines-before 1
        :if-new (file+head "Notes/${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    ;; Configure backlinks buffer to always appear at the bottom
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (slot . 0)
                   (window-width . 0.33)
                   (window-height . 0.4)
                   (window-parameters . ((no-delete-other-windows . t)))))
    (org-roam-setup))
  (org-roam-db-autosync-mode)

  (require 'org-roam-dailies)


#+end_src


* Org-roam Daily

Helper functions to open or create the daily

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun my/roam-dailies--today-filepath ()
    "Return the absolute path of today’s Org-roam daily note."
    (let* ((fname (format-time-string "%Y/%m-%B/%d-%B-%Y-%A.org" (current-time)))
           (dir   (expand-file-name org-roam-dailies-directory
                                    org-roam-directory)))
      (expand-file-name fname dir)))
    
#+end_src

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun my/roam-dailies-goto-or-capture-today ()
    "If today’s daily file exists, `goto` it; otherwise `capture` it."
    (interactive)
    (let ((file (my/roam-dailies--today-filepath)))
      ;; ensure the dailies directory is there
      (unless (file-directory-p (file-name-directory file))
        (make-directory (file-name-directory file) :parents))
      (if (file-exists-p file)
          ;; ── already there → just visit it ──
          (org-roam-dailies-goto-today)
        ;; ── absent → create via your capture template “d” ──
        (org-roam-dailies-capture-today))))

    
#+end_src

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun org-roam-dailies--list-files-recursively ()
    "List all Org files in `org-roam-dailies-directory' and its subdirectories."
    (let ((dailies-dir (expand-file-name org-roam-dailies-directory org-roam-directory)))
      (directory-files-recursively dailies-dir "\\.org$")))

  (advice-add 'org-roam-dailies--list-files :override #'org-roam-dailies--list-files-recursively)

#+end_src


** Daily Keybindings

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  ;(global-set-key (kbd "s-d") 'org-roam-dailies-goto-today)
  (global-set-key (kbd "s-d") 'my/roam-dailies-goto-or-capture-today)
  (global-set-key (kbd "s-c") 'org-roam-dailies-goto-date)
  (global-set-key (kbd "s-a") (lambda () (interactive) (org-agenda nil "d")))
  (global-set-key (kbd "C-s-{") 'org-roam-dailies-find-previous-note)
  (global-set-key (kbd "C-s-}") 'org-roam-dailies-find-next-note)
  (global-set-key (kbd "s-t") (lambda () (interactive) (org-capture nil "tt")))
  (global-set-key (kbd "s-q") 'org-roam-node-insert-immediate)
  (global-set-key (kbd "s-i") 'org-roam-node-insert)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-<tab>") 'org-shifttab)
  (global-set-key (kbd "C-c s") 'org-store-link)
    
#+end_src


** Org Agenda

Show *Org Agenda* in a right‑side window (≈ 50 % of the frame)

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (add-to-list
   'display-buffer-alist
   '("^\\*Org Agenda\\*$"                           ; any agenda buffer
     (display-buffer-reuse-window                  ; ► first try to reuse…
      )               ; ► …else make a side‑window
     (side         . right)                        ; right edge of the frame
     (slot         . 0)                            ; topmost slot on that side
     (window-width . 0.50)                         ; half the frame’s width
     ;; optional niceties
     ;;(window-parameters . ((no-delete-other-windows . t) ; keep layout stable
     ;;                      ))
     )) ; M‐p / M‐n ignore
    
#+end_src


** Consult Org-roam

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (use-package consult-org-roam
     :ensure t
     :after org-roam
     :init
     (require 'consult-org-roam)
     ;; Activate the minor mode
     (consult-org-roam-mode 1)
     :custom
     ;; Use `ripgrep' for searching with `consult-org-roam-search'
     ;(consult-org-roam-grep-func #'consult-ripgrep)
     ;; Configure a custom narrow key for `consult-buffer'
     (consult-org-roam-buffer-narrow-key ?r)
     ;; Display org-roam buffers right after non-org-roam buffers
     ;; in consult-buffer (and not down at the bottom)
     (consult-org-roam-buffer-after-buffers t)
     :config
     ;; Eventually suppress previewing for certain functions
     (consult-customize
      consult-org-roam-forward-links
      :preview-key "M-.")
     :bind
     ;; Define some convenient keybindings as an addition
     ("C-c n e" . consult-org-roam-file-find)
     ("C-c n b" . consult-org-roam-backlinks)
     ("C-c n B" . consult-org-roam-backlinks-recursive)
     ("C-c n b" . consult-org-roam-backlinks)     
     ("C-c n l" . consult-org-roam-forward-links)
     ("C-c n g" . consult-org-roam-search)
     )
    
#+end_src


* Setup Git Auto Commits

Auto git every hour

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (defun my/org-notes-auto-commit ()
    "Auto-commit and push all changes in the notes repository, including untracked files."
    (let ((default-directory "~/RoamNotes")) ;; Replace with your notes repo path
      (when (file-directory-p default-directory)
        (require 'magit)
        ;; Save all modified buffers before Git actions
        (save-some-buffers t)
        ;; Stage all changes
        (magit-run-git "add" "-A")
        ;; Commit only if something is staged
        (when (magit-staged-files)
          (magit-commit-create
           `("-m" ,(format "Auto-commit notes: %s" (format-time-string "%F %T"))))
  	(magit-push-current-to-pushremote nil)))))

  (run-at-time "0 min" 3600 #'my/org-notes-auto-commit)

#+end_src


* Org Helper functions

This function opens the Org link at point without selecting the window and binds it to =C-c p=

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (defun my/org-open-at-point-no-select ()
    "Open the Org link at point but keep focus in the current window."
    (interactive)
    (save-selected-window
      (org-open-at-point)))

  ;; rebind C-c p in Org mode to our new version
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c p") #'my/org-open-at-point-no-select))


    
#+end_src


Also Bind to M-S-mouse click based on the position of the mouse.

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el
  
  (defun my/org-open-at-point-no-select-mouse (event)
    "Call my/org-open-at-point-no-select at the position of mouse click EVENT."
    (interactive "e")
    (let* ((pos (event-start event))
           (window (posn-window pos))
           (buffer (window-buffer window))
           (position (posn-point pos)))
      (with-current-buffer buffer
        (goto-char position)
        (my/org-open-at-point-no-select))))

  (global-set-key [M-S-mouse-1] 'my/org-open-at-point-no-select-mouse)

#+end_src


* Org Contacts
  
Org-contacts configuration

#+begin_src emacs-lisp   :tangle ~/dotfiles/init-org.el

    (require 'org-contacts)
    (setq org-contacts-files '("~/RoamNotes/Contacts.org"))

#+end_src

Helper functions for defining emails lists with tab completion
  
#+begin_src emacs-lisp   :tangle ~/dotfiles/init-org.el

  (defun jda/org--contacts-groups ()
    "Return a list of all unique group names in org-contacts."
    (let ((groups '()))
      (org-map-entries
       (lambda ()
         (let ((contact-groups (org-entry-get nil "GROUP")))
           (when contact-groups
             (dolist (group (split-string contact-groups))
               (add-to-list 'groups group)))))
       nil
       (org-contacts-files))
      groups))


  (defun jda/get--group-emails (group)
    "Return a list of emails for contacts in GROUP."
    (let ((emails '()))
      (org-map-entries
       (lambda ()
         (let ((contact-groups (org-entry-get nil "GROUP"))
               (email (org-entry-get nil "EMAIL")))
  	 (when (and contact-groups email
                      (string-match (regexp-quote group) contact-groups))
             (push email emails))))
       nil
       (org-contacts-files))
      emails))


  (defun jda/insert-group-emails (group)
    "Insert comma-separated list of emails for GROUP.
   With completion for available groups."
    (interactive
     (list (completing-read "Group name: " (jda/org--contacts-groups))))
    (let ((emails (jda/get--group-emails group)))
      (insert (mapconcat 'identity emails ", "))))


#+end_src


* Org-download

https://github.com/abo-abo/org-download

#+begin_src emacs-lisp  :tangle ~/dotfiles/init-org.el

  (require 'org-download)

  (add-hook 'dired-mode-hook 'org-download-enable)

#+end_src


* Configure Babel Languages

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))
  
  (setq org-babel-python-command "/opt/homebrew/bin/python3")
  (setq org-confirm-babel-evaluate nil)


  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

    
#+end_src


* GCal Integration

#+begin_src emacs-lisp ~/dotfiles/init-org.el

  (defun efs/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
          nil)))
    
#+end_src

Need to fix client secret with gnp

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (require 'plstore)
  (add-to-list 'plstore-encrypt-to "D37214566A581BF2")


  (setq plstore-cache-passphrase-for-symmetric-encryption t)

  (setq org-gcal-client-id "57759006028-j8fafbn9prevdvjihbrf7hslpf0g09aa.apps.googleusercontent.com"
        org-gcal-client-secret (efs/lookup-password :host "org-gal-client")
        org-gcal-fetch-file-alist '(("johnda102@gmail.com" .  "~/RoamNotes/gcal.org")))

  (require 'org-gcal)
  (setq org-gcal-auto-archive nil)
  ;;(setq org-gcal-recurring-events-mode 'top-level)  ; Better handling of recurring events

  (setq org-gcal-remove-api-cancelled-events t)

  ;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
  ;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))


#+end_src


* Mu4e

Email


#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  ;; adjust path if needed
  (add-to-list 'load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e") 
    
#+end_src

Org-mail captures

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (defun efs/capture-mail-follow-up (msg)
    "Capture a follow-up task from an email."
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "mf"))

  (defun efs/capture-mail-read-later (msg)
    "Capture a readlater task from an email."
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "mr"))

    
#+end_src

Main setup

Testing [[https://github.com/armindarvish/consult-mu][consult-mu]]  Nice way to search email quickly

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el

  (use-package mu4e
    :ensure nil
    ;:load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e"
    :defer 20 ; Wait until 20 seconds after startup
    :bind(:map mu4e-search-minor-mode-map
  	     ("M-<right>" . right-word)
  	     ("M-<left>" .  left-word)
  	     )
    :bind(:map mu4e-compose-mode-map
    	         ("M-n" .  forward-paragraph)
  	     ("M-p" .  backward-paragraph)
  	     )

    :config
    (require 'mu4e-org)
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 30 minutes
    (setq mu4e-update-interval (* 30 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")
    (setq mu4b-mu-binary "/opt/homebrew/bin/mu")
    (setq user-mail-address  "johnalison@cmu.edu")
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")
    ;;(setq mu4e-compose-format-flowed t)
    (setq mu4e-compose-format-flowed nil)
    (setq mu4e-compose-signature nil)
    (setq mu4e-attachment-dir "~/Downloads")

    (setq mu4e-headers-show-threads nil)      ;; Main option to disable threading
    (setq mu4e-headers-include-related nil)   ;; Don't include related messages
    (setq mu4e-headers-skip-duplicates nil)   ;; Show all messages, even duplicates


    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
  	       '("follow up" . efs/capture-mail-follow-up) t)
    (add-to-list 'mu4e-view-actions
  	       '("follow up" . efs/capture-mail-follow-up) t)
    (add-to-list 'mu4e-headers-actions
  	       '("read later" . efs/capture-mail-read-later) t)
    (add-to-list 'mu4e-view-actions
  	       '("read later" . efs/capture-mail-read-later) t)


    (setq mu4e-bookmarks
  	'(("flag:unread AND NOT flag:trashed" "Unread messages"      ?i)
  	  ("flag:flagged AND NOT flag:trashed"                     "Flagged"             ?f)
  	  ("maildir:\"/Inbox\" and date:today..now AND NOT flag:trashed"                  "Today's messages"     ?t)
  	  ("maildir:\"/Inbox\" and date:7d..now AND NOT flag:trashed"                  "This Weeks's messages"     ?w)
  	  ("maildir:\"/Inbox\" and date:30d..now AND NOT flag:trashed"                  "This Months's messages"     ?m)
  	))


    (setq mu4e-maildir-shortcuts
        '(("/Inbox"             . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ;;("/[Gmail]/Important" . ?m)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a)))

    (setq
     message-send-mail-function 'smtpmail-send-it
     smtpmail-smtp-user "johnda102@gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587
     smtpmail-stream-type 'starttls
     smtpmail-auth-credentials "~/.authinfo.gpg")


    (mu4e t)
    )

    
#+end_src

#+begin_src emacs-lisp

  (use-package consult-mu
    :load-path ("~/emacs/consult-mu" "~/emacs/consult-mu/extras")
    :after (consult mu4e)
    :custom
    ;;maximum number of results shown in minibuffer
    (consult-mu-maxnum 200)
    ;;show preview when pressing any keys
    (consult-mu-preview-key 'any)
    ;;do not mark email as read when previewed
    (consult-mu-mark-previewed-as-read nil)
    ;; do not amrk email as read when selected. This is a good starting point to ensure you would
    ;; not miss important emails marked as read by mistake especially when trying this package out.
    ;;  Later you can change this to t.
    (consult-mu-mark-viewed-as-read nil)
    ;; open the message in mu4e-view-buffer when selected.
    (consult-mu-action #'consult-mu--view-action)

    :config
    ;;create a list of saved searches for quick access using `histroy-next-element'
    ;; with `M-n' in minibuffer. Note the "#" character at the beginning of each query! Change these according to
    (setq consult-mu-saved-searches-dynamics '("#flag:unread"))
    (setq consult-mu-saved-searches-async '("#flag:unread"))
    ;; require extra module for searching contacts and runing embark actions on contacts
    (require 'consult-mu-contacts)
    (setq consult-mu-contacts-ignore-list '("^.*no.*reply.*"))
    (setq consult-mu-contacts-ignore-case-fold-search t)
    )

#+end_src

* Helper Functions

Zoom link

#+begin_src emacs-lisp

  (define-abbrev global-abbrev-table "myzoom" "https://cmu.zoom.us/j/4126571061")
  (define-abbrev global-abbrev-table "yield" "yeild")

#+end_src



* Languages

Fly check

#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
    
#+end_src

** Language Servers

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)

;;    ;; Essential for TRAMP
;;    (setq lsp-auto-guess-root t)
;;    (setq lsp-enable-file-watchers nil)
;;    (setq lsp-response-timeout 30)
;;
;;    ;; Enable TRAMP support
;;    (lsp-register-client
;;     (make-lsp-client :new-connection (lsp-tramp-connection "pylsp")
;;                      :major-modes '(python-mode)
;;                      :remote? t
;;                      :server-id 'pylsp-tramp))
    )

#+end_src




** Python
 
#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :bind (:map python-mode-map
  	      :package python
                ("<backtab>" . dabbrev-expand))
    )


  (use-package pyvenv
    :config
    (pyvenv-mode 1))


  (add-hook 'python-mode-hook (lambda () (company-mode -1)))


  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :custom
    ;; Configure pylsp to use pylint
    (lsp-completion-enable nil)

    (lsp-pylsp-plugins-pylint-enabled t)
    (lsp-pylsp-plugins-flake8-enabled nil)

    (lsp-pylsp-plugins-autopep8-enabled t) ;; Turn on for code style
    (lsp-pylsp-plugins-black-enabled nil)
    (lsp-pylsp-plugins-yapf-enabled nil)

    (lsp-pylsp-plugins-pycodestyle-enabled nil)
    (lsp-pylsp-plugins-pyflakes-enabled nil)
    (lsp-pylsp-plugins-pylint-args ["--max-line-length=88" "--disable=C0103"]))

#+end_src


** Company

#+begin_src emacs-lisp
   
;;;    (use-package company
;;;      :after lsp-mode
;;;      :hook (prog-mode . company-mode)
;;;      :bind (:map company-active-map
;;;  		("<tab>" . company-complete-selection)
;;;  		("C-h" .   nil)
;;;  		("C-?" .   company-show-doc-buffer)
;;;  		)
;;;            (:map lsp-mode-map
;;;             ("<tab>" . company-indent-or-complete-common))
;;;      :custom
;;;      (company-minimum-prefix-length 1)
;;;      (company-idle-delay 0.0))
;;;
;;;  ;;   (use-package company-box
;;;  ;;    :hook (company-mode . company-box-mode))
      
#+end_src


* Emacs vs Emacs -nw config

#+begin_src emacs-lisp
      ;;:init (load-theme 'modus-operandi t)))

  (unless (eq window-system nil)
    (use-package doom-themes
      :init (load-theme 'modus-operandi-tritanopia t)))

  (unless (eq window-system nil)
    (load "~/dotfiles/init-org.el"))
    
#+end_src


* Auto-tangle configuration files

This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle ~/dotfiles/init-org.el
  
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


* World Clock

#+begin_src emacs-lisp

  (setq world-clock-list
        '(("America/New_York" "Pittsburgh")
          ("Europe/Zurich" "CERN")
          ("America/Chicago" "Chicago")
  	("America/Los_Angeles" "Santa Barbara")
          ("Asia/Shanghai" "China")))


#+end_src
